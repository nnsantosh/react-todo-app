AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for React app hosting infrastructure: S3, CloudFront, and IAM user for deployments'

Parameters:
  ApplicationName:
    Type: String
    Description: Name of your application (used for resource naming)
    Default: react-todo-app
  
  DomainName:
    Type: String
    Description: Optional custom domain name (leave blank if not using custom domain)
    Default: 'intelligenceforrealhackers.com'

Conditions:
  HasDomainName: !Not [!Equals [!Ref DomainName, '']]

Resources:
  # S3 Bucket for React App
  ReactAppBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ApplicationName}'
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html  # SPA support - redirect all errors to index.html

  # Bucket Policy - Allow CloudFront to access S3
  ReactAppBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ReactAppBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: 's3:GetObject'
            Resource: !Sub '${ReactAppBucket.Arn}/*'
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

  # CloudFront Origin Access Identity
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'OAI for ${ApplicationName}'

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt ReactAppBucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: S3Origin
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # CachingOptimized policy
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf  # CORS-S3Origin policy
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
        PriceClass: PriceClass_100
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        HttpVersion: http2

  # IAM User for Deployments
  DeploymentUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Sub '${ApplicationName}-deployer'
      Path: /
      Policies:
        - PolicyName: DeploymentPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:DeleteObject'
                  - 's3:ListBucket'
                Resource:
                  - !GetAtt ReactAppBucket.Arn
                  - !Sub '${ReactAppBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - 'cloudfront:CreateInvalidation'
                Resource: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

  # Access Key for Deployment User
  DeploymentUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref DeploymentUser

Outputs:
  S3BucketName:
    Description: S3 bucket name for React app
    Value: !Ref ReactAppBucket

  CloudFrontDistributionId:
    Description: CloudFront distribution ID
    Value: !Ref CloudFrontDistribution

  CloudFrontDomainName:
    Description: CloudFront domain name
    Value: !GetAtt CloudFrontDistribution.DomainName

  DeploymentUserAccessKey:
    Description: Access key ID for deployment user
    Value: !Ref DeploymentUserAccessKey

  DeploymentUserSecretKey:
    Description: Secret access key for deployment user
    Value: !GetAtt DeploymentUserAccessKey.SecretAccessKey
